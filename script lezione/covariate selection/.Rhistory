install.packages("coda")
rm(list=ls())
y <- matrix(c(-1,-1,1,1,2,-2,2,-2,NA,NA,NA,NA,-1,1,-1,1,NA,NA,NA,NA,2,-2,2,-1),
12, 2)
dim(y)
y
n <- nrow(y)
n
colnames(y) <- c("y1", "y2")
plot(y, pch = 19)
y.aug <- y
Sig <- diag(2)
miss <- which(is.na(y), arr.ind = T)
miss
righe <- miss[,1] # rows
colonne <- miss[,2] # columns
righe
colonne
n.mis <- length(righe)
n.mis
n0 <- 4   # nu
Psi <- 2* diag(2)
Psi
iteff <- 5000
burnin <- 10000
thin <- 10
niter <- iteff*thin + burnin
niter
rho <- vector(length = iteff)
missing.new <- NULL
set.seed(313)
for(iter in 1:niter)
{
## Step 1: simulate the missing data
for(i in 1:n.mis)
{
if(colonne[i] == 1)
{
## We simulate the Observations
## related to Missing information on the First Component:
## We need to simulate [Y_1 | Y_2]
## They will be Gaussian with mean and variance,
## as we saw at the blackboard
mu1 <- Sig[1,2]/Sig[2,2]*y[righe[i],2]
s2_1 <- Sig[1,1] - Sig[1,2]^2/Sig[2,2] # varianza
y.aug[righe[i],1] <- rnorm(1, mean = mu1, sd = sqrt(s2_1))
}
else
{
## We simulate the Observations
## related to Missing information on the Second Component:
## We need to simulate [Y_2 | Y_1]
## They will be Gaussian with mean and variance,
## as we saw at the blackboard
mu2 <- Sig[2,1]/Sig[1,1]*y[righe[i],1]
s2_2 <- Sig[2,2] - Sig[2,1]^2/Sig[1,1]
y.aug[righe[i],2] <- rnorm(1, mean = mu2, sd = sqrt(s2_2))
}
}
## Step 2: simulate matrix Sigma, conditionally on
## the vector of data augmented with the missing values
# Compute S:
S <- t(y.aug)%*%y.aug
# print(S)
# Parameters of the function to draw from the Wishart distribution:
# n 	 integer sample size.
# df 	 numeric parameter, “degrees of freedom”.
# Sigma 	 positive definite (p * p) “scale” matrix, the matrix parameter
#        of the distribution.
## The function rWishart is in the library of R
Sig <- rWishart(1, df = n + n0, Sigma = solve(S+Psi))[, ,1]
## Invert the matrix to obtain a sample from an invWishart
Sig <- solve(Sig)
if(iter>burnin & (iter-burnin)%%thin==0)
{ ## Compute the correlation parameter at each iteration
rho[(iter-burnin)/thin] <- (Sig[1,2]/sqrt(Sig[1,1]*Sig[2,2]))
missing.new <- c(missing.new, y.aug[5,2])
}
if(iter%%10000 == 0) cat("*** Iteration number ", iter,"/", niter,"\n")
}
x11()
par(mfrow = c(1,2))
hist(rho, nclass="fd", freq = F)
lines(density(rho), col = "darkblue", lwd = 2)
plot(rho, type = 'l')
head(missing.new)
x11()
par(mfrow = c(1,2))
hist(missing.new, prob = T, main = "Missing value: y_(5,2)")
lines(density(missing.new), col = "darkblue", lwd = 2)
plot(missing.new, type = 'l')
library(mvtnorm)
installed.packages(mvtnorm)
install.packages("mvtnorm")
install.packages("bayesm")
library(mvtnorm)
library(bayesm)
lposterior <- function(y, Sig, n0, Psi)
{
out = 0
for(i in 1:4)
{
## The first 4 observations have no missing data
## So they Fully contribute to the likelihood
## (bivariate normal)
out = out + dmvnorm(y[i,], mean=c(0,0), sig=Sig, log=T)
}
for( i in 5:8)
{
# These observations have a missing component
# (The second) --> the contribution to the likelihood
# Is partial and given by a univariate normal (MARGINAL)
out = out + dnorm(y[i,1], mean = 0, sd = sqrt(Sig[1,1]), log = T)
}
for(i in 9:12)
{
# These observations have a missing component
# (The first) --> the contribution to the likelihood
# Is partial and given by a univariate normal (MARGINAL)
out = out + dnorm(y[i,2], mean = 0, sd = sqrt(Sig[2,2]), log = T)
}
# Prior information:
# use the package "bayesm" that contains the function
# lndIWishart() to compute the log of the inv-Wishart density
out = out + lndIWishart(nu = n0, V = Psi, IW = Sig)
if(iter%%1000 == 0) cat("*** Iteration number ", iter,"/", niter,"\n")
return(out)
}
Sig <- diag(1,2)
rho_MH <- vector()
Psiinv <- solve(Psi)
np = 2
niter = 5000
system.time( # --> time
for(iter in 1:niter)
{
# propose a new value for the matrix
Delta <-  rWishart(1, df = np, Sigma = Psiinv)[,,1]
Delta <- solve(Delta)
# log of the acceptance rate
log_acp <- lposterior(y, Delta, n0, Psi) + lndIWishart(nu = np, V = Psi, IW = Sig) # numeratore
log_acp <- log_acp - lposterior(y, Sig, n0, Psi) - lndIWishart(nu = np, V = Psi, IW = Delta)  # denominatore
lu <- log(runif(1))
## Accept or reject?
if(lu < log_acp)
{
Sig = Delta
}
## compute the correlation at each iteration
rho_MH[iter] <- (Sig[1,2]/sqrt(Sig[1,1]*Sig[2,2]))
}
)
x11()
par(mfrow = c(1,2))
hist(rho_MH, nclass="fd", freq = F)
lines(density(rho_MH), col = "red", lwd = 2)
lines(density(rho), col = "darkgreen", lwd = 2)
plot(rho_MH, type = 'l')
graphics.off()
rm(list=ls())
dens <- function(x,d)
{
return(d/gamma(1/d)*exp(-x^(d)))
}
ldens <- function(x,d)
{
return(log(d) - lgamma(1/d) - x^d)
}
slice.dens <- function(niter, x0 = 1, d = 1/2)
{
# vector containig the auxiliary r.v. Unif(0,f(x))
u.out <- vector(length = niter)
# vector containing the r.v. of interest
x.out <- vector(length = niter)
for(j in 1:niter)
{
# sample U ~ Unif(0,f(x))
u.out[j] <- runif(1, min = 0, max = dens(x0, d))
z = log(u.out[j]) # log scale
# In this example, the set S
# has the form (0, app) where app is
app <- (log(d) - lgamma(1/d) - z)^(1/d)
## A new value fo the chain is sampled
## from a Unif (0, app)
x0 <- runif(n = 1, min = 0, max = app)
x.out[j] <- x0
}
return(list(x = x.out, u = u.out))
}
niter <- 6000
d <- 1/2
set.seed(1905)
chain <- slice.dens(niter, x0 = 1, d = d)
x11()
hist((chain$x), nclass="fd", freq = F, col = "gray", main = "Hist of the chain", xlim = c(0,60))
curve(dens(x,d), n = 500, from = 0, add = T, col = "red", lwd = 1.6)
plot(chain$x, type = "l")
par(mfrow=c(2,1))
acf(chain$x)
acf(chain$u)
plot(cumsum(chain$x)/(1:length(chain$x)), type = 'l')
burnin = 1000
thin = 5
niter
chain.mat = cbind(chain$x[ seq(burnin + 1, niter, by = thin)],chain$u[ seq(burnin + 1, niter, by = thin)] )
dim(chain.mat)
require(coda)
chain.mcmc = mcmc(chain.mat, start = burnin +1, end = niter, thin = thin)
plot(chain.mcmc)
cumuplot(chain.mcmc)
par(mfrow = c(1,2))
acf(chain.mat[,1])
acf(chain.mat[,2])
x11()
curve(dens(x, 1/2), from = 0, to = 30, add = F, col = "red", n = 500, lwd = 2)
slice.dens <- function(niter, x0 = 1, d = 1/2)
{
# vector containig the auxiliary r.v. Unif(0,f(x))
u.out <- vector(length = niter)
# vector containing the r.v. of interest
x.out <- vector(length = niter)
for(j in 1:niter)
{
# sample U ~ Unif(0,f(x))
u.out[j] <- runif(1, min = 0, max = dens(x0, d))
z = log(u.out[j]) # log scale
# In this example, the set S
# has the form (0, app) where app is
app <- (log(d) - lgamma(1/d) - z)^(1/d)
## A new value fo the chain is sampled
## from a Unif (0, app)
x0 <- runif(n = 1, min = 0, max = app)
x.out[j] <- x0
}
return(list(x = x.out, u = u.out))
}
niter <- 6000
d <- 1/2
set.seed(1905)
chain <- slice.dens(niter, x0 = 1, d = d)
x11()
hist((chain$x), nclass="fd", freq = F, col = "gray", main = "Hist of the chain", xlim = c(0,60))
curve(dens(x,d), n = 500, from = 0, add = T, col = "red", lwd = 1.6)
plot(chain$x, type = "l")
par(mfrow=c(2,1))
acf(chain$x)
acf(chain$u)
plot(cumsum(chain$x)/(1:length(chain$x)), type = 'l')
plot(cumsum(chain$x)/(1:length(chain$x)), type = 'l')
burnin = 1000
plot(cumsum(chain$x)/(1:length(chain$x)), type = 'l')
x11()
plot(cumsum(chain$x)/(1:length(chain$x)), type = 'l')
burnin = 1000
thin = 5
niter
chain.mat = cbind(chain$x[ seq(burnin + 1, niter, by = thin)],chain$u[ seq(burnin + 1, niter, by = thin)] )
dim(chain.mat)
require(coda)
chain.mcmc = mcmc(chain.mat, start = burnin +1, end = niter, thin = thin)
plot(chain.mcmc)
cumuplot(chain.mcmc)
par(mfrow = c(1,2))
acf(chain.mat[,1])
acf(chain.mat[,2])
graphics.off()
x11()
curve(dens(x,d), n = 500, from = 0, to = 5, add = F, col = "blue", lwd = 2, ylim = c(0,0.5))
# The asterisk represents the value x0
points(1,0, pch="*", cex = 2, col="blue")
# segment (0,f(x0))
segments(x0 = 1, x1 = 1, y0 = 0, y1 = dens(1,d), lty=2)
# first value for  U ~ Unif(0,f(x0))
points(1, chain$u[1], pch = 4, cex = 1)
segments(x0 = 1, x1 = 1, y0 = 0, y1 = chain$u[1], col = "red", lwd = 1.5)
# Set S
segments(x0 = (-log(chain$u[1]) + log(d)- log(gamma(1/d)))^(1/d), x1 = 0, y0 = chain$u[1], y1 = chain$u[1])
##  x1
points(chain$x[1],chain$u[1],lty=2)
segments(x0 = 1, x1 = chain$x[1], y0 = chain$u[1], y1 = chain$u[1], col = "red", lwd = 2)
points(chain$x[1],0,pch="*",cex=2,col="blue")
segments(x0 = chain$x[1], x1 = chain$x[1], y0 = 0, y1 = dens(chain$x[1],d), lty = 2)
points(chain$x[1] ,chain$u[2],pch=4,cex=1)
segments(x0=chain$x[1],x1=chain$x[1],y0=chain$u[1],y1=chain$u[2],col="red",lwd=2)
segments(x0=(-log(chain$u[2])+log(d)-log(gamma(1/d)))^(1/d),x1=0,y0=chain$u[2],y1=chain$u[2],lty=2)
points(chain$x[2],chain$u[2])
segments(x0=chain$x[1],x1=chain$x[2],y0=chain$u[2],y1=chain$u[2],col="red",lwd=2)
points(chain$x[2],0,pch="*",cex=2,col="blue")
segments(x0=chain$x[2],x1=chain$x[2],y0=0,y1=dens(chain$x[2],d),lty=2)
points(chain$x[2] ,chain$u[3],pch=4,cex=1)
segments(x0=chain$x[2],x1=chain$x[2],y0=chain$u[2],y1=chain$u[3],col="red",lwd=2)
segments(x0=(-log(chain$u[3])+log(d)-log(gamma(1/d)))^(1/d),x1=0,y0=chain$u[3],y1=chain$u[3],lty=2)
points(chain$x[3],chain$u[3])
segments(x0=chain$x[2],x1=chain$x[3],y0=chain$u[3],y1=chain$u[3],col="red",lwd=2)
points(chain$x[3],0,pch="*",cex=2, col="blue")
for(i in 1:30)
{
points(chain$x[2+i] ,chain$u[3+i],pch=4,cex=1)
segments(x0=chain$x[2+i],x1=chain$x[2+i],y0=chain$u[2+i],y1=chain$u[3+i],col="red",lwd=2)
points(chain$x[3+i],chain$u[3+i])
segments(x0=chain$x[2+i],x1=chain$x[3+i],y0=chain$u[3+i],y1=chain$u[3+i],col="red",lwd=2)
points(chain$x[3+i],0,pch="*",cex=2,col="blue")
Sys.sleep(1.)
}
points(chain$x, chain$u, cex = 0.3, col = "yellow")
setwd("~/Github/Stat.-Bayesiana")
rm(list=ls())
library(rjags)   # to interface R with JAGS
reach <- read.table("REACH_data.txt",header=T)
reach <- read.table("Dataset.txt",header=T)
x <- as.matrix(reach[,1:12])
Y <- as.vector(reach[,13])
N <- dim(x)[1]
p <- dim(x)[2]
a=2
v1=1
#We consider setting 2 of hyperparameters
var_sp <- 0.00027
var_sl  <- 2.7
##Then as a conseguence,
## Remark if X~t-student with
## scale parameter sigma and nu>2 df
##  var(X)=sigma*(nu/(nu-2))
##Then
b <- var_sl*(a-1)/v1
b
v0 <- var_sp*(a-1)/b
v0
##### delta
s1 <- sqrt(b*v0/a)
s2 <- sqrt(b*v1/a)
rr <- (s2/s1)^(2/(2*a+1))
dd <- sqrt(2*a*(1-rr)/(rr/s2^2-1/s1^2 ) )
dd
###########################################
library("MCMCpack")
install.packages("MCMCpack")
curve(0.5*dinvgamma(x,shape=a,scale=v1*b)+0.5*dinvgamma(x,shape=a,scale=v0*b),from=0,to=10,type="n",ylab="prior density")
curve(0.5*dinvgamma(x,shape=a,scale=v0*b),from=0.000001,to=0.2,add=T,col="red",lty=2,lwd=2)
text(2,0.05,"quasi-spike component",col="red")
curve(0.5*dinvgamma(x,shape=a,scale=v1*b),from=0,to=10,add=T,col="blue",lty=2,lwd=2)
text(7,0.05,"slab component",col="blue")
library("MCMCpack")
curve(0.5*dinvgamma(x,shape=a,scale=v1*b)+0.5*dinvgamma(x,shape=a,scale=v0*b),from=0,to=10,type="n",ylab="prior density")
curve(0.5*dinvgamma(x,shape=a,scale=v0*b),from=0.000001,to=0.2,add=T,col="red",lty=2,lwd=2)
text(2,0.05,"quasi-spike component",col="red")
curve(0.5*dinvgamma(x,shape=a,scale=v1*b),from=0,to=10,add=T,col="blue",lty=2,lwd=2)
text(7,0.05,"slab component",col="blue")
tdist <- function(x,nu,sig=1,mu=0){
out <- lgamma((nu+1)/2)-lgamma(nu/2)-1/2*log(pi*nu)-log(sig)-((nu+1)/2)*log( 1+1/nu*( (x-mu)/sig)^2)
return(exp(out))
}
##Then we compute the scale parameter for the quasi-spike and the slab
## prior
s1 <- sqrt(b*v0/a)
s2 <- sqrt(b*v1/a)
##And we try to visualize
curve(0.5*tdist(x,nu=2*a,sig=s1)+0.5*tdist(x,nu=2*a,sig=s2),from=-5,to=5,type="l",ylab="prior density")
curve(0.5*tdist(x,nu=2*a,sig=s1),from=-5,to=5,add=T,col="red",lty=2,lwd=2)
text(1.8,7,"quasi-spike component",col="red")
curve(0.5*tdist(x,nu=2*a,sig=s2),from=-5,to=5,add=T,col="blue",lty=2,lwd=2)
text(-2,0.3,"slab component",col="blue")
curve(0.5*tdist(x,nu=2*a,sig=s1)+0.5*tdist(x,nu=2*a,sig=s2),from=-5,to=5,add=T)
data_win <-list(N=N, p=p, Y = Y,x=as.matrix(x),v0=v0,v1=v1,a=a,b=b)
inits = function() {
list( beta0=1.0, beta=rep(1,p), tau=1.0,
g=rep(0,p),.RNG.seed=321,.RNG.name = 'base::Wichmann-Hill')
}
model=jags.model("NMIG_probit.bug",data=data_win,n.adapt=1000,inits=inits,n.chains=1)
setwd("~/Github/Stat.-Bayesiana/script lezione/covariate selection")
model=jags.model("NMIG_probit.bug",data=data_win,n.adapt=1000,inits=inits,n.chains=1)
model=jags.model("SSVS_probit.bug",data=data_win,n.adapt=1000,inits=inits,n.chains=1)
model=jags.model("SSVS_probit.bug",data=data_win,n.adapt=1000,inits=inits,n.chains=1)
